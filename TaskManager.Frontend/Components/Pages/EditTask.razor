@page "/edittask"
@page "/edittask/{id:int}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject TasksClient TasksClient

<PageTitle>@titleHead</PageTitle>
<h3>@titleHead</h3>

@if (task is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-5">
            <EditForm Model="@task" FormName="editTask" OnValidSubmit="HandleSubmitAsync" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="task.Title" class="form-control"/>
                    <ValidationMessage For="() => task.Title" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="task.Description" class="form-control"/>
                    <ValidationMessage For="() => task.Description" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code 
{
    [Parameter]
    public int? Id {get; set;}

    [SupplyParameterFromForm]
    private TaskDetails? task {get; set;}

    private string titleHead = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (task is not null) //com isso a "task" nao e destruida apos o handleSubmit, pois esse metodo e invocado duas vezes, quando carrega a pagina e apos o handlesubmit
        {
            return;
        }

        if (Id is not null)
        {
            task = await TasksClient.GetTaskAsync(Id.Value);
            titleHead = $"Edit {task.Title}";
        }
        else 
        {
            task = new()
            {
                Title = string.Empty,
                Description = string.Empty
            };
            titleHead = "New Task"; 
        }
    }

    private async Task HandleSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(task);

        if (Id is null)
        {
            await TasksClient.AddTaskAsync(task);
        }
        else
        {
            task.Id = Id.Value;
            await TasksClient.UpdateTaskAsync(task);
        }

        NavigationManager.NavigateTo("/"); //volta para a pagina inicial
    }
}
